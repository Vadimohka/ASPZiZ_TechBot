from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db import (
    is_admin, is_staff, set_chat_active, get_all_chats, log, get_new_tickets, get_admins,
    add_support_chat, is_ticket_published, register_publication, get_ticket, get_ticket_media, get_all_tickets,
    get_user_by_id, set_user_role
)
from handlers import gen_accept_kb
import logging

router = Router()
logger = logging.getLogger(__name__)

# ---- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ----
def staff_or_admin_only(handler):
    async def wrapper(*args, **kwargs):
        obj = None
        for arg in args:
            if isinstance(arg, types.Message) or isinstance(arg, types.CallbackQuery):
                obj = arg
                break
        obj = obj or kwargs.get('message') or kwargs.get('callback') or kwargs.get('event')
        if obj is None:
            logger.error("staff_or_admin_only: –Ω–µ –Ω–∞–π–¥–µ–Ω message/callback")
            return
        user_id = obj.from_user.id
        user = await get_user_by_id(user_id)
        role = user[3] if user else None
        if role not in ('admin', 'staff'):
            await obj.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è staff –∏–ª–∏ admin.") if hasattr(obj, "answer") else await obj.message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è staff –∏–ª–∏ admin.")
            return
        return await handler(*args, **kwargs)
    return wrapper

def admin_only(handler):
    async def wrapper(*args, **kwargs):
        obj = None
        for arg in args:
            if isinstance(arg, types.Message) or isinstance(arg, types.CallbackQuery):
                obj = arg
                break
        obj = obj or kwargs.get('message') or kwargs.get('callback') or kwargs.get('event')
        if obj is None:
            logger.error("admin_only: –Ω–µ –Ω–∞–π–¥–µ–Ω message/callback")
            return
        user_id = obj.from_user.id
        if not await is_admin(user_id):
            await obj.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.") if hasattr(obj, "answer") else await obj.message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
            return
        return await handler(*args, **kwargs)
    return wrapper

# ---- –ö–æ–º–∞–Ω–¥—ã ----
@router.message(Command("chats"))
@admin_only
async def show_chats(message: types.Message, **kwargs):
    chats = await get_all_chats()
    if not chats:
        await message.answer("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return
    text = ""
    kb = InlineKeyboardBuilder()
    for chat_id, title, is_active in chats:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        text += f"{title or chat_id} ({chat_id}): {status}\n"
        if is_active:
            kb.button(text=f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {title or chat_id}", callback_data=f"deactivate_{chat_id}")
        else:
            kb.button(text=f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {title or chat_id}", callback_data=f"activate_{chat_id}")
    await message.answer(text, reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("activate_"))
@admin_only
async def activate_chat(callback: types.CallbackQuery, **kwargs):
    chat_id = int(callback.data.split("_")[1])
    await set_chat_active(chat_id, True, approved_by=callback.from_user.id)
    await log("activate_chat", callback.from_user.id, f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç–∞ {chat_id}")
    await callback.answer("–ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    await callback.message.edit_reply_markup(None)

@router.callback_query(F.data.startswith("deactivate_"))
@admin_only
async def deactivate_chat(callback: types.CallbackQuery, **kwargs):
    chat_id = int(callback.data.split("_")[1])
    await set_chat_active(chat_id, False, approved_by=callback.from_user.id)
    await log("deactivate_chat", callback.from_user.id, f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç–∞ {chat_id}")
    await callback.answer("–ß–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    await callback.message.edit_reply_markup(None)

@router.my_chat_member()
async def on_bot_added(event: types.ChatMemberUpdated, bot: Bot, **kwargs):
    if event.new_chat_member.user.id == (await bot.me()).id:
        await add_support_chat(event.chat.id, event.chat.title)
        admins = await get_admins()
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_chat_{event.chat.id}")
        kb.button(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_chat_{event.chat.id}")
        for admin_id in admins:
            await bot.send_message(
                admin_id,
                f"–ù–æ–≤—ã–π —á–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {event.chat.title} (id: {event.chat.id}). –ê–ø—Ä—É–≤–∏—Ç—å?",
                reply_markup=kb.as_markup()
            )

@router.callback_query(F.data.startswith("approve_chat_"))
@admin_only
async def approve_chat(callback: types.CallbackQuery, **kwargs):
    chat_id = int(callback.data.split("_")[2])
    await set_chat_active(chat_id, True, approved_by=callback.from_user.id)
    await callback.answer("–ß–∞—Ç –æ–¥–æ–±—Ä–µ–Ω!")
    await callback.message.edit_reply_markup(None)

@router.callback_query(F.data.startswith("decline_chat_"))
@admin_only
async def decline_chat(callback: types.CallbackQuery, **kwargs):
    chat_id = int(callback.data.split("_")[2])
    await set_chat_active(chat_id, False, approved_by=callback.from_user.id)
    await callback.answer("–ß–∞—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω!")
    await callback.message.edit_reply_markup(None)

@router.message(Command("republish_new_tickets"))
@admin_only
async def republish_new_tickets(message: types.Message, bot: Bot = None, **kwargs):
    if not bot:
        bot = kwargs.get('bot')
    tickets = await get_new_tickets()
    chats = await get_all_chats()
    count = 0
    for ticket in tickets:
        for chat_id, title, is_active in chats:
            if is_active and not await is_ticket_published(ticket[0], chat_id):
                media = await get_ticket_media(ticket[0])
                group = []
                for m in media:
                    if m[0] == 'photo':
                        group.append(types.InputMediaPhoto(m[1], caption=ticket[3] if len(group) == 0 else None))
                    elif m[0] == 'video':
                        group.append(types.InputMediaVideo(m[1], caption=ticket[3] if len(group) == 0 else None))
                if group:
                    msgs = await bot.send_media_group(chat_id=chat_id, media=group)
                    await register_publication(ticket[0], chat_id, msgs[0].message_id)
                else:
                    msg = await bot.send_message(chat_id, ticket[3], reply_markup=gen_accept_kb(ticket[0]))
                    await register_publication(ticket[0], chat_id, msg.message_id)
                count += 1
    await message.answer(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {count}")

@router.message(Command("all_history"))
@admin_only
async def all_history(message: types.Message, **kwargs):
    tickets = await get_all_tickets()
    if not tickets:
        await message.answer("–ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    text_lines = []
    for t in tickets:
        ticket_id, user_id, username, created_at, status, text = t
        snippet = (text[:50] + "...") if text and len(text) > 50 else (text or "")
        text_lines.append(f"#{ticket_id} [{status}] {created_at} ‚Äî @{username or user_id}: {snippet}")
    MAX_CHARS = 4000
    msg = ""
    for line in text_lines:
        if len(msg) + len(line) + 1 > MAX_CHARS:
            await message.answer(msg)
            msg = ""
        msg += line + "\n"
    if msg:
        await message.answer(msg)

@router.message(Command("help_admins"))
@staff_or_admin_only
async def help_admins(message: types.Message, **kwargs):
    help_text = """
<b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã Helpdesk-–±–æ—Ç–∞:</b>

<code>/start</code>
‚Äî –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é <b>user</b>. –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å).

<code>/who_am_i</code>
‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à Telegram ID, username –∏ —Ä–æ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ (—Ä–æ–ª—å –≤—Å–µ–≥–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö).

<code>/my_history</code>
‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É: –¥–∞—Ç–∞, —Å—Ç–∞—Ç—É—Å (new/accepted/done), —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è. –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

<code>/help</code>
‚Äî –ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

<b>–¢–æ–ª—å–∫–æ –¥–ª—è staff –∏–ª–∏ admin:</b>

<code>/chats</code>
‚Äî –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å —á–∞—Ç—ã –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä—è–º–æ –∏–∑ Telegram.

<code>/republish_new_tickets</code>
‚Äî –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –Ω–µ—Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

<code>/republish_ticket &lt;id&gt;</code>
‚Äî <b>–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞!</b> –ü–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–æ–≤—ã–≤–∞–µ—Ç –õ–Æ–ë–£–Æ –∑–∞—è–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É (id) –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ—à–ª—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π. –ü—Ä–∏–º–µ—Ä: <code>/republish_ticket 7</code>

<code>/all_history</code>
‚Äî –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫: –Ω–æ–º–µ—Ä, –¥–∞—Ç–∞, —Å—Ç–∞—Ç—É—Å, –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å. –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –º–Ω–æ–≥–æ ‚Äî —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤.

<code>/set_role &lt;user_id&gt; &lt;role&gt;</code>
‚Äî <b>–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞!</b> –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å user/staff/admin –ø–æ Telegram ID.
–ü—Ä–∏–º–µ—Ä: <code>/set_role 123456 staff</code>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±–∞–∑–µ. –¢–æ–ª—å–∫–æ –¥–ª—è admin.

<b>–ö–Ω–æ–ø–∫–∏ –∏ callback-–∏ (–≤ —á–∞—Ç–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏):</b>
‚Ä¢ <b>–ü—Ä–∏–Ω—è—Ç—å</b> ‚Äî <b>–¢–æ–ª—å–∫–æ staff</b> –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É (–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ accepted, –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—å –∫—Ç–æ –∏ –∫–æ–≥–¥–∞ –≤–∑—è–ª).
‚Ä¢ <b>–ó–∞–≤–µ—Ä—à–∏—Ç—å</b> ‚Äî –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—è–≤–∫—É (—Å—Ç–∞—Ç—É—Å done, –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é).

<b>–ß–∞—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ staff/admin):</b>
‚Äî –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –Ω–æ–≤—ã–π —á–∞—Ç, –∞–¥–º–∏–Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–∞—Ç–∞. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –±—É–¥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.

<b>–ü—Ä–æ—á–µ–µ:</b>
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ –ª–æ–≥–∞—Ö: —Å–æ–∑–¥–∞–Ω–∏–µ, —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞, –∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç–æ–≤, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —Ç.–¥.
‚Ä¢ –†–æ–ª–∏ (user, staff, admin) —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–µ. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ ‚Äî –≤—Å–µ–≥–¥–∞ "user" –ø–æ—Å–ª–µ /start.
‚Ä¢ –¢–æ–ª—å–∫–æ staff/admin –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏, —á–∞—Ç–∞–º–∏, –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –∏ –≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤.

<b>–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç!</b>
"""
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("set_role"))
@admin_only
async def set_role(message: types.Message, **kwargs):
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_role <telegram_id> <role>\n–ü—Ä–∏–º–µ—Ä: /set_role 123456 staff")
        return
    telegram_id, role = parts[1], parts[2]
    if role not in ("user", "staff", "admin"):
        await message.answer("–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: user, staff, admin")
        return
    user = await get_user_by_id(int(telegram_id))
    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await set_user_role(int(telegram_id), role)
    await message.answer(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role}.")

@router.message(Command("republish_ticket"))
@admin_only
async def republish_ticket(message: types.Message, bot: Bot = None, **kwargs):
    cmd_text = message.text.strip().split()
    if len(cmd_text) < 2 or not cmd_text[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /republish_ticket <id_–∑–∞—è–≤–∫–∏>")
        return
    ticket_id = int(cmd_text[1])
    ticket = await get_ticket(ticket_id)
    if not ticket:
        await message.answer(f"–ó–∞—è–≤–∫–∞ #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    chats = await get_all_chats()
    count = 0
    for chat_id, title, is_active in chats:
        if is_active:
            media = await get_ticket_media(ticket_id)
            group = []
            for m in media:
                if m[0] == 'photo':
                    group.append(types.InputMediaPhoto(m[1], caption=ticket[3] if len(group) == 0 else None))
                elif m[0] == 'video':
                    group.append(types.InputMediaVideo(m[1], caption=ticket[3] if len(group) == 0 else None))
            if group:
                msgs = await bot.send_media_group(chat_id=chat_id, media=group)
                await register_publication(ticket_id, chat_id, msgs[0].message_id)
            else:
                msg = await bot.send_message(chat_id, ticket[3], reply_markup=gen_accept_kb(ticket_id))
                await register_publication(ticket_id, chat_id, msg.message_id)
            count += 1
    await message.answer(f"–ó–∞—è–≤–∫–∞ #{ticket_id} –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ {count} —á–∞—Ç(–∞—Ö).")
