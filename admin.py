from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import (
    is_admin, set_chat_active, get_all_chats, log, get_new_tickets, get_admins,
    add_user
)

router = Router()

def admin_only(handler):
    async def wrapper(message, *args, **kwargs):
        await add_user(message.from_user.id, message.from_user.username or "", role="admin")
        if not await is_admin(message.from_user.id):
            await message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
            return
        return await handler(message, *args, **kwargs)
    return wrapper

@router.message(Command("chats"))
@admin_only
async def show_chats(message: types.Message):
    chats = await get_all_chats()
    if not chats:
        await message.answer("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return
    text = ""
    kb = InlineKeyboardBuilder()
    for chat_id, title, is_active in chats:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        text += f"{title or chat_id} ({chat_id}): {status}\n"
        if is_active:
            kb.button(text=f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {title or chat_id}", callback_data=f"deactivate_{chat_id}")
        else:
            kb.button(text=f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {title or chat_id}", callback_data=f"activate_{chat_id}")
    await message.answer(text, reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("activate_"))
async def activate_chat(callback: types.CallbackQuery):
    chat_id = int(callback.data.split("_")[1])
    await set_chat_active(chat_id, True, admin_id=callback.from_user.id)
    await log("activate_chat", callback.from_user.id, f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç–∞ {chat_id}")
    await callback.answer("–ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    await callback.message.edit_reply_markup(None)

@router.callback_query(F.data.startswith("deactivate_"))
async def deactivate_chat(callback: types.CallbackQuery):
    chat_id = int(callback.data.split("_")[1])
    await set_chat_active(chat_id, False, admin_id=callback.from_user.id)
    await log("deactivate_chat", callback.from_user.id, f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç–∞ {chat_id}")
    await callback.answer("–ß–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    await callback.message.edit_reply_markup(None)

@router.message(Command("republish_new_tickets"))
@admin_only
async def republish_new_tickets(message: types.Message, bot):
    tickets = await get_new_tickets()
    if not tickets:
        await message.answer("–ù–µ—Ç –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    chat_ids = await get_all_chats()
    chat_ids = [c[0] for c in chat_ids if c[2]]  # —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
    count = 0
    for ticket_id, telegram_id, username, text, media_type, media_file_id in tickets:
        for chat_id in chat_ids:
            if media_type == "text":
                await bot.send_message(
                    chat_id,
                    f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={telegram_id}'>{username or telegram_id}\n–¢–µ–∫—Å—Ç: {text}"
                )
            elif media_type == "photo":
                await bot.send_photo(
                    chat_id,
                    media_file_id,
                    caption=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={telegram_id}'>{username or telegram_id}\n–¢–µ–∫—Å—Ç: {text}"
                )
            elif media_type == "video":
                await bot.send_video(
                    chat_id,
                    media_file_id,
                    caption=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={telegram_id}'>{username or telegram_id}\n–¢–µ–∫—Å—Ç: {text}"
                )
            elif media_type == "audio":
                await bot.send_audio(
                    chat_id,
                    media_file_id,
                    caption=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={telegram_id}'>{username or telegram_id}\n–¢–µ–∫—Å—Ç: {text}"
                )
            count += 1
    await log("republish", message.from_user.id, f"–†–µ–ø–∞–±–ª–∏—à {count} –∑–∞—è–≤–æ–∫")
    await message.answer(f"–ó–∞—è–≤–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã: {count}")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∞—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
@router.message(F.new_chat_members)
async def new_chat_member(message: types.Message, bot):
    for member in message.new_chat_members:
        if member.id == bot.id:
            from db import add_support_chat, get_admins
            await add_support_chat(message.chat.id, message.chat.title)
            for admin_id in await get_admins():
                kb = InlineKeyboardBuilder()
                kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_chat_{message.chat.id}")
                kb.button(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_chat_{message.chat.id}")
                await bot.send_message(
                    admin_id,
                    f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —á–∞—Ç: {message.chat.title} (id: {message.chat.id}). –ê–ø—Ä—É–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∑–∞—è–≤–æ–∫?",
                    reply_markup=kb.as_markup()
                )

@router.callback_query(F.data.startswith("approve_chat_"))
async def approve_chat(callback: types.CallbackQuery):
    chat_id = int(callback.data.split("_")[2])
    await set_chat_active(chat_id, True, admin_id=callback.from_user.id)
    await log("approve_chat", callback.from_user.id, f"–ê–ø—Ä—É–≤ —á–∞—Ç–∞ {chat_id}")
    await callback.answer("–ß–∞—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    await callback.message.edit_reply_markup(None)

@router.callback_query(F.data.startswith("reject_chat_"))
async def reject_chat(callback: types.CallbackQuery):
    chat_id = int(callback.data.split("_")[2])
    await set_chat_active(chat_id, False, admin_id=callback.from_user.id)
    await log("reject_chat", callback.from_user.id, f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–∞—Ç–∞ {chat_id}")
    await callback.answer("–ß–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    await callback.message.edit_reply_markup(None)
